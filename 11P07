#include <Servo.h>

// Arduino pin assignment
#define PIN_LED   9   // LED 핀 (범위 내 점등)
#define PIN_TRIG  12  // sonar sensor TRIGGER
#define PIN_ECHO  13  // sonar sensor ECHO
#define PIN_SERVO 10  // servo motor

// configurable parameters for sonar
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 25      // sampling interval (unit: msec)
#define PULSE_DURATION 10 // ultra-sound Pulse Duration (unit: usec)
#define _DIST_MIN 180.0   // minimum distance (18cm)
#define _DIST_MAX 360.0   // maximum distance (36cm)

// TIMEOUT 계산. pulseIn의 세 번째 인자는 unsigned long 타입
#define TIMEOUT ((unsigned long)((INTERVAL / 2.0) * 1000.0)) 
#define SCALE (0.001 * 0.5 * SND_VEL) // duration to distance (mm)

#define _EMA_ALPHA 0.3    // EMA weight (alpha) - **실험하여 최적값을 선택**해야 합니다.

// Target Distance (이 변수는 제어 로직에서 사용되지 않음)
#define _TARGET_LOW  250.0
#define _TARGET_HIGH 290.0

// Servo Pulse width defines (일반적인 서보 펄스 폭)
#define _DUTY_MIN 1000 // 0 degree
#define _DUTY_NEU 1500 // 90 degree
#define _DUTY_MAX 2000 // 180 degree

// global variables
float  dist_ema, dist_prev; // unit: mm
unsigned long last_sampling_time;      // unit: ms

Servo myservo;

void setup() {
  // initialize GPIO pins
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);   // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);    // sonar ECHO
  digitalWrite(PIN_TRIG, LOW); // turn-off Sonar 

  myservo.attach(PIN_SERVO); 
  myservo.write(90); // 90도 (중립)로 시작

  // initialize USS related variables for stable filtering start
  dist_prev = _DIST_MIN; 
  dist_ema = _DIST_MIN; 

  // initialize serial port
  Serial.begin(57600);
}

void loop() {
  float  dist_raw, dist_filtered;
   
  // wait until next sampling time.
  if (millis() < last_sampling_time + INTERVAL)
    return;

  // 1. get a distance reading from the USS
  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);

  // 2. Range Filter (범위 필터: 180mm ~ 360mm)
  if ((dist_raw == 0.0) || (dist_raw > _DIST_MAX) || (dist_raw < _DIST_MIN)) {
      // 측정 실패(0.0), 360mm 초과, 180mm 미만 시 이전 필터링 값을 유지 (급격한 0도 이동 방지)
      dist_filtered = dist_prev;
  } else {    // In desired Range (180mm <= dist_raw <= 360mm)
      // 정상 범위 내 값이면 업데이트
      dist_filtered = dist_raw;
      dist_prev = dist_raw; // 다음 루프에서 사용할 '이전 필터링 값' 업데이트
  }

  // 3. EMA Filter (EMA 필터) 적용
  // dist_ema = (alpha * 현재 필터링 값) + ((1 - alpha) * 이전 EMA 값)
  dist_ema = (_EMA_ALPHA * dist_filtered) + ((1.0 - _EMA_ALPHA) * dist_ema);

  // 4. LED 제어 (범위 180mm ~ 360mm 안에 들어왔을 때 PIN_LED 점등)
  if ((dist_ema >= _DIST_MIN) && (dist_ema <= _DIST_MAX)) {
      digitalWrite(PIN_LED, HIGH); // 켜기 (Active-HIGH 연결 가정)
  } else {
      digitalWrite(PIN_LED, LOW); // 끄기
  }

  // 5. 서보 각도 제어 (거리 비례)
  if ((dist_ema >= _DIST_MIN) && (dist_ema <= _DIST_MAX)) {
      // 180mm(0도) ~ 360mm(180도) 사이에서 거리에 비례하여 각도 변환
      // map 함수를 사용하여 선형 변환
      int angle = map((int)dist_ema, (int)_DIST_MIN, (int)_DIST_MAX, 0, 180);
      myservo.write(angle);
  } else if (dist_ema < _DIST_MIN) {
      // 180mm 이하: 0도 고정
      myservo.write(0);
  } else { // dist_ema > _DIST_MAX
      // 360mm 이상: 180도 고정
      myservo.write(180);
  }


  // 6. 시리얼 출력 (플로터 고려 형식)
  Serial.print("Min:");    Serial.print(_DIST_MIN);
  Serial.print(",dist:");  Serial.print(dist_raw);
  Serial.print(",ema:");   Serial.print(dist_ema);  // EMA 적용된 최종 값
  Serial.print(",Servo:"); Serial.print(myservo.read());  // 현재 서보 각도
  Serial.print(",Max:");    Serial.print(_DIST_MAX);
  Serial.println("");
  
  // update last sampling time
  last_sampling_time += INTERVAL;
}

// get a distance reading from USS. return value is in millimeter.
float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
   
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // unit: mm
}
